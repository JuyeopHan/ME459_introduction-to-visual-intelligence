clc; clear all; close all;

% Load Image

pattern = imread('hw3_pattern.png');
image(pattern);
% W/O normalization
%% given data

center_img = [800, 600, 1]; % [px, px]
%center_img = [0, 0, 1]; % [px, px]

points_img = [
    761, 534, 1;
    
    694, 575, 1;
    623, 620, 1;
    548, 666, 1;
    469, 716, 1;
    
    767, 621, 1;
    696, 667, 1;
    621, 717, 1;
    544, 771, 1;
    
    843, 670, 1;
    773, 719, 1;
    699, 770, 1;
    621, 826, 1;
    
    922, 720, 1;
    853, 772, 1;
    780, 827, 1;
    704, 885, 1;
    
    1005, 773, 1;
    937, 827, 1;
    864, 886, 1;
    788, 946, 1;
    
    697, 496, 1;
    624, 539, 1;
    548, 585, 1;
    466, 634, 1;
    
    701, 412, 1;
    626, 454, 1;
    546, 499, 1;
    462, 546, 1;
    
    704, 323, 1;
    627, 363, 1;
    546, 408, 1;
    458, 454, 1;
    
    709, 229, 1;
    629, 268, 1;
    545, 309, 1;
    454, 354, 1;
    
    840, 499, 1;
    918, 544, 1;
    1000, 591, 1;
    1085, 642, 1;
    
    848, 415, 1;
    929, 461, 1;
    1013, 508, 1;
    1101, 556, 1;
    
    857, 327, 1;
    940, 371, 1;
    1027, 418, 1;
    1118, 468, 1;
    
    865, 233, 1;
    952, 277, 1;
    1042, 323, 1;
    1137, 370, 1;];

points_img = points_img - center_img + [0, 0, 1];

points_3D = [
    0.0, 0.0, 0.0, 1.0;
    
    0.12, 0.0, 0.0, 1.0;
    0.24, 0.0, 0.0, 1.0;
    0.36, 0.0, 0.0, 1.0;
    0.48, 0.0, 0.0, 1.0;
    
    0.12, 0.12, 0.0, 1.0;
    0.24, 0.12, 0.0, 1.0;
    0.36, 0.12, 0.0, 1.0;
    0.48, 0.12, 0.0, 1.0;
    
    0.12, 0.24, 0.0, 1.0;
    0.24, 0.24, 0.0, 1.0;
    0.36, 0.24, 0.0, 1.0;
    0.48, 0.24, 0.0, 1.0;
    
    0.12, 0.36, 0.0, 1.0;
    0.24, 0.36, 0.0, 1.0;
    0.36, 0.36, 0.0, 1.0;
    0.48, 0.36, 0.0, 1.0;
    
    0.12, 0.48, 0.0, 1.0;
    0.24, 0.48, 0.0, 1.0;
    0.36, 0.48, 0.0, 1.0;
    0.48, 0.48, 0.0, 1.0;
    
    0.12, 0.0, 0.12, 1.0;
    0.24, 0.0, 0.12, 1.0;
    0.36, 0.0, 0.12, 1.0;
    0.48, 0.0, 0.12, 1.0;
    
    0.12, 0.0, 0.24, 1.0;
    0.24, 0.0, 0.24, 1.0;
    0.36, 0.0, 0.24, 1.0;
    0.48, 0.0, 0.24, 1.0;
    
    0.12, 0.0, 0.36, 1.0;
    0.24, 0.0, 0.36, 1.0;
    0.36, 0.0, 0.36, 1.0;
    0.48, 0.0, 0.36, 1.0;
    
    0.12, 0.0, 0.48, 1.0;
    0.24, 0.0, 0.48, 1.0;
    0.36, 0.0, 0.48, 1.0;
    0.48, 0.0, 0.48, 1.0;
    
    0.0, 0.12, 0.12, 1.0;
    0.0, 0.24, 0.12, 1.0;
    0.0, 0.36, 0.12, 1.0;
    0.0, 0.48, 0.12, 1.0;
    
    0.0, 0.12, 0.24, 1.0;
    0.0, 0.24, 0.24, 1.0;
    0.0, 0.36, 0.24, 1.0;
    0.0, 0.48, 0.24, 1.0;
    
    0.0, 0.12, 0.36, 1.0;
    0.0, 0.24, 0.36, 1.0;
    0.0, 0.36, 0.36, 1.0;
    0.0, 0.48, 0.36, 1.0;
    
    0.0, 0.12, 0.48, 1.0;
    0.0, 0.24, 0.48, 1.0;
    0.0, 0.36, 0.48, 1.0;
    0.0, 0.48, 0.48, 1.0];

[n_p, d_p] = size(points_3D);
%% build constraint matrix

A = zeros(2*n_p ,12); % initialize constraint matrix

for i = 1:n_p
    A(i,:) = [zeros(1,4), - points_img(i,3) * points_3D(i, :), points_img(i,2) * points_3D(i, :)];
    A(n_p + i,:) = [points_img(i,3) * points_3D(i, :), zeros(1,4), - points_img(i,1) * points_3D(i, :)];
end

%% Direct Linear Transformation (DLT)

[U, D, V] = svd(A);

% translation vector expressed in the camera frame
P = reshape(V(:, 12), [4, 3])';
C = null(P);
C = C / C(4)

M = P(1:3, 1:3);

% QR Decomposition and normalization
[R_inv, K_inv] = qr(inv(M));
K = inv(K_inv)
K = K / K(3,3)
R = inv(R_inv)
t = -R*C(1:3)
